# Workflow is based on the Astropy GitHub actions workflow, ci_workflows.yml
name: CI

on:
    push:
        branches:
            - '*'
        tags:
            - '*'
    pull_request:

jobs:
    tests:
        name: Unit tests
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: true
            matrix:
                os: [ubuntu-latest]
                python-version: ['3.10', '3.11'] 
                fitsio-version: ['>=1.1.7']
        env:
            DESIUTIL_VERSION: 3.4.1
            FASTSPECFIT: ${GITHUB_WORKSPACE}/fastspecfit
            DESI_ROOT: ${FASTSPECFIT}/desi

        steps:
            - name: Checkout code
              uses: actions/checkout@v2
              with:
                fetch-depth: 0

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v2
              with:
                python-version: ${{ matrix.python-version }}

            - name: Install Python dependencies
              run: |
                python -m pip install --upgrade pip wheel
                python -m pip install pytest
                python -m pip install git+https://github.com/desihub/desiutil.git@${DESIUTIL_VERSION}#egg=desiutil
                python -m pip install -r requirements.txt
                python -m pip cache remove fitsio
                python -m pip install --no-deps --force-reinstall --ignore-installed 'fitsio${{ matrix.fitsio-version }}'

            - name: Verify Installation
              run: pip list

            - name: Run the test
              run: PYTHONPATH=${GITHUB_WORKSPACE}/py FASTSPECFIT=${GITHUB_WORKSPACE} DESI_ROOT=${GITHUB_WORKSPACE}/desi pytest

    coverage:
        name: Test coverage
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: true
            matrix:
                os: [ubuntu-latest]
                python-version: ['3.10', '3.11']
                fitsio-version: ['>=1.1.7']
        env:
            DESIUTIL_VERSION: 3.4.1
            FASTSPECFIT: ${GITHUB_WORKSPACE}/fastspecfit
            DESI_ROOT: ${FASTSPECFIT}/desi

        steps:
            - name: Checkout code
              uses: actions/checkout@v2
              with:
                fetch-depth: 0
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v2
              with:
                python-version: ${{ matrix.python-version }}
            - name: Install Python dependencies
              run: |
                python -m pip install --upgrade pip wheel
                python -m pip install pytest pytest-cov coveralls
                python -m pip install git+https://github.com/desihub/desiutil.git@${DESIUTIL_VERSION}#egg=desiutil
                python -m pip install -r requirements.txt
                python -m pip cache remove fitsio
                python -m pip install --no-deps --force-reinstall --ignore-installed 'fitsio${{ matrix.fitsio-version }}'
            - name: Run the test with coverage
              run: pytest --cov
            - name: Coveralls
              env:
                COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: coveralls --service=github

    docs:
        name: Doc test
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
                python-version: ['3.10', '3.11']

        steps:
            - name: Checkout code
              uses: actions/checkout@v2
              with:
                fetch-depth: 0
                
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v2
              with:
                python-version: ${{ matrix.python-version }}
                
            - name: Install Python dependencies
              run: |
                python -m pip install --upgrade pip wheel
                python -m pip install Sphinx sphinx-toolbox

            - name: Test the documentation
              run: sphinx-build -W --keep-going -b html doc doc/_build/html

    style:
        name: Style check
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
                python-version: ['3.10', '3.11']

        steps:
            - name: Checkout code
              uses: actions/checkout@v2
              with:
                fetch-depth: 0
                
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v2
              with:
                python-version: ${{ matrix.python-version }}
                
            - name: Install Python dependencies
              run: python -m pip install --upgrade pip wheel pycodestyle
              
            - name: Test the style; failures are allowed
              # This is equivalent to an allowed falure.
              continue-on-error: true
              run: pycodestyle --count py/fastspecfit
