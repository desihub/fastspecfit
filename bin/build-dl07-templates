#!/usr/bin/env python

import os, pdb
import numpy as np
from astropy.table import Table
import matplotlib.pyplot as plt


def main():

    templatesdir = '/Users/ioannis/work/desi/science/gqp/templates'
    templatefile = os.path.join(templatesdir, 'Nenkova08', 'Nenkova08_y010_torusg_n10_q2.0.dat')
    data = np.loadtxt(templatefile, skiprows=4)
    tau = ['5', '10', '20', '30', '40', '60', '80', '100', '150']

    fig, ax = plt.subplots()
    for ii in range(9):
        ax.plot(data[:, 0], data[:, 1+ii], label=tau[ii])
    ax.set_xscale('log')
    ax.set_yscale('log')
    ax.legend()
    fig.savefig('junk.png')
    return

    pdb.set_trace()

    from scipy.interpolate import RegularGridInterpolator

    dl07dir = '/Users/ioannis/work/desi/science/gqp/templates/DL07'

    umin = np.array([0.10, 0.15, 0.20, 0.30, 0.40, 0.50, 0.70, 0.80,
                     1.00, 1.20, 1.50, 2.00, 2.50, 3.00, 4.00, 5.00, 
                     7.00, 8.00, 12.0, 15.0, 20.0, 25.0])
    numin = len(umin)

    # from Table 3 in https://arxiv.org/pdf/astro-ph/0608003
    d_qpah = {
        'MW3.1_00': 0.47,
        'MW3.1_10': 1.12,
        'MW3.1_20': 1.77,
        'MW3.1_30': 2.50,
        'MW3.1_40': 3.19,
        'MW3.1_50': 3.90,
        'MW3.1_60': 4.58,
        }
    models = list(d_qpah.keys())
    qpah = np.array([d_qpah[model] for model in models])
    nqpah = len(qpah)

    #allfiles = sorted(glob(os.path.join(dl07dir, 'original', 'DL07_*.dat')))
    #models = [os.path.basename(onefile).replace('DL07_', '').replace('.dat', '') for onefile in allfiles]

    nwave = 1001
    dustem = np.zeros((nqpah, numin*2, nwave))

    for imodel, model in enumerate(models):
        dustfile = os.path.join(dl07dir, 'original', f'DL07_{model}.dat')
        dustem1 = np.loadtxt(dustfile, skiprows=2)
        wave = dustem1[:, 0]
        dustem[imodel, :, :] = dustem1[:, 1:].T
    #wave *= 1e4 # [mu --> Angstrom]

    my_umin = 1.0
    my_qpah = 3.5 # 1.5 # 1.12 # 3.5
    my_gamma = 0.01

    #umax_interp = LinearNDInterpolator(list(zip(qpah, umin)), dustem[:, 22:, :])
    umin_interp = RegularGridInterpolator((qpah, umin), dustem[:, :22, :])
    umax_interp = RegularGridInterpolator((qpah, umin), dustem[:, 22:, :])

    dumin = umin_interp((my_qpah, my_umin))
    dumax = umax_interp((my_qpah, my_umin))
    mduste = (1. - my_gamma) * dumin + my_gamma * dumax

    I = np.where(wave < 10.)[0]

    fig, ax = plt.subplots()
    ax.plot(wave[I], dustem[4, 8, I], label='model: qpah=3.19')
    ax.plot(wave[I], dustem[5, 8, I], label='model: qpah=3.90')
    ax.plot(wave[I], dumin[I], label='interp: qpah=3.5')
    ax.set_xscale('log')
    ax.set_yscale('log')
    ax.legend()
    fig.savefig('junk.png')

    pdb.set_trace()


if __name__ == '__main__':
    main()

